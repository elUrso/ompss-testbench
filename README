#Test bench

This container is intended to remove the needs to install libraries and other files in order to run benchmarks form the taskdep-suit.

To use it just create a folder named src and add your benchmarks there.

You shall clone the benchmarks into src/taskdep-suit

Utilize `update.sh` to update the image and `run.sh` to test it.

The bench comands shall be used inside the benchmark folder.

The structure of the container is:

/src <- files are copied here

$suit_root
    /conf <- configuration file
    /c    <- bench api folder
    /group
        /benchmark
        ...
    ...

The commands to use bench are:

bench build  - Build the project
bench run    - Run it and generate jsons
bench export - Get machine information and export csv

The conf file is not yet used by all the benchmarks, but it should hold the prefix configurations to make your life easier in cross-compiling and testing special flags for optimization.

Even though the build is made using makefiles usually, do not simply run make build, bench algo creates folders at the momement and future releases may do more complex stuff  as the goal of the software is to deliver zeroconf benchmark tests with nice optimizations.

Notes on Parsec benchmarks:
The require more optimizations and the source code of many needs clean up.

Working benchmarks:
    kastors
        jacobi
        sparselu
        strassen
    parsec
        blackscholes
        dedup
        swaptions

Failed benchmarks:
    parsec
        bodytrack - Error compiling ompss version
            Reproduce:
            get parsec/bodytrack from parsec-ompss repo
            cd it's src folder
            $autoreconf -fiv
            $./configure --enable-ompss
            $make
            then:
            mcxx_main.cpp: In function 'void smp_ol_mainOMPSS_3_unpacked(long int, int, ParticleFilterOMPSS<TrackingModel>*, void*, std::ostream&)':
            mcxx_main.cpp:33047:18: error: return-statement with a value, in function returning 'void' [-fpermissive]
                return 0;

About Future revisions:
    The required folder here is to build some libraries required, in a future update this will be removed because bench will support compiling helper libraries only once.